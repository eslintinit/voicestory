### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Channel {
  author: User
  community: Community
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  url: String!
}

input ChannelCreateInput {
  author: UserCreateOneWithoutChannelsInput
  community: CommunityCreateOneWithoutChannelsInput
  createdAt: DateTime
  description: String
  id: String
  messages: MessageCreateManyWithoutChannelInput
  name: String!
  url: String!
}

input ChannelCreateManyWithoutAuthorInput {
  connect: [ChannelWhereUniqueInput!]
  create: [ChannelCreateWithoutAuthorInput!]
}

input ChannelCreateManyWithoutCommunityInput {
  connect: [ChannelWhereUniqueInput!]
  create: [ChannelCreateWithoutCommunityInput!]
}

input ChannelCreateOneWithoutMessagesInput {
  connect: ChannelWhereUniqueInput
  create: ChannelCreateWithoutMessagesInput
}

input ChannelCreateWithoutAuthorInput {
  community: CommunityCreateOneWithoutChannelsInput
  createdAt: DateTime
  description: String
  id: String
  messages: MessageCreateManyWithoutChannelInput
  name: String!
  url: String!
}

input ChannelCreateWithoutCommunityInput {
  author: UserCreateOneWithoutChannelsInput
  createdAt: DateTime
  description: String
  id: String
  messages: MessageCreateManyWithoutChannelInput
  name: String!
  url: String!
}

input ChannelCreateWithoutMessagesInput {
  author: UserCreateOneWithoutChannelsInput
  community: CommunityCreateOneWithoutChannelsInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  url: String!
}

input ChannelFilter {
  every: ChannelWhereInput
  none: ChannelWhereInput
  some: ChannelWhereInput
}

input ChannelOrderByInput {
  authorUsername: OrderByArg
  communityUrl: OrderByArg
  createdAt: OrderByArg
  description: OrderByArg
  id: OrderByArg
  name: OrderByArg
  url: OrderByArg
}

input ChannelScalarWhereInput {
  AND: [ChannelScalarWhereInput!]
  authorUsername: NullableStringFilter
  communityUrl: NullableStringFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  id: StringFilter
  messages: MessageFilter
  name: StringFilter
  NOT: [ChannelScalarWhereInput!]
  OR: [ChannelScalarWhereInput!]
  url: StringFilter
}

input ChannelUpdateInput {
  author: UserUpdateOneWithoutChannelsInput
  community: CommunityUpdateOneWithoutChannelsInput
  createdAt: DateTime
  description: String
  id: String
  messages: MessageUpdateManyWithoutChannelInput
  name: String
  url: String
}

input ChannelUpdateManyDataInput {
  createdAt: DateTime
  description: String
  id: String
  name: String
  url: String
}

input ChannelUpdateManyWithoutAuthorInput {
  connect: [ChannelWhereUniqueInput!]
  create: [ChannelCreateWithoutAuthorInput!]
  delete: [ChannelWhereUniqueInput!]
  deleteMany: [ChannelScalarWhereInput!]
  disconnect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ChannelUpdateManyWithWhereNestedInput!]
  upsert: [ChannelUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ChannelUpdateManyWithoutCommunityInput {
  connect: [ChannelWhereUniqueInput!]
  create: [ChannelCreateWithoutCommunityInput!]
  delete: [ChannelWhereUniqueInput!]
  deleteMany: [ChannelScalarWhereInput!]
  disconnect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateWithWhereUniqueWithoutCommunityInput!]
  updateMany: [ChannelUpdateManyWithWhereNestedInput!]
  upsert: [ChannelUpsertWithWhereUniqueWithoutCommunityInput!]
}

input ChannelUpdateManyWithWhereNestedInput {
  data: ChannelUpdateManyDataInput!
  where: ChannelScalarWhereInput!
}

input ChannelUpdateOneRequiredWithoutMessagesInput {
  connect: ChannelWhereUniqueInput
  create: ChannelCreateWithoutMessagesInput
  update: ChannelUpdateWithoutMessagesDataInput
  upsert: ChannelUpsertWithoutMessagesInput
}

input ChannelUpdateWithoutAuthorDataInput {
  community: CommunityUpdateOneWithoutChannelsInput
  createdAt: DateTime
  description: String
  id: String
  messages: MessageUpdateManyWithoutChannelInput
  name: String
  url: String
}

input ChannelUpdateWithoutCommunityDataInput {
  author: UserUpdateOneWithoutChannelsInput
  createdAt: DateTime
  description: String
  id: String
  messages: MessageUpdateManyWithoutChannelInput
  name: String
  url: String
}

input ChannelUpdateWithoutMessagesDataInput {
  author: UserUpdateOneWithoutChannelsInput
  community: CommunityUpdateOneWithoutChannelsInput
  createdAt: DateTime
  description: String
  id: String
  name: String
  url: String
}

input ChannelUpdateWithWhereUniqueWithoutAuthorInput {
  data: ChannelUpdateWithoutAuthorDataInput!
  where: ChannelWhereUniqueInput!
}

input ChannelUpdateWithWhereUniqueWithoutCommunityInput {
  data: ChannelUpdateWithoutCommunityDataInput!
  where: ChannelWhereUniqueInput!
}

input ChannelUpsertWithoutMessagesInput {
  create: ChannelCreateWithoutMessagesInput!
  update: ChannelUpdateWithoutMessagesDataInput!
}

input ChannelUpsertWithWhereUniqueWithoutAuthorInput {
  create: ChannelCreateWithoutAuthorInput!
  update: ChannelUpdateWithoutAuthorDataInput!
  where: ChannelWhereUniqueInput!
}

input ChannelUpsertWithWhereUniqueWithoutCommunityInput {
  create: ChannelCreateWithoutCommunityInput!
  update: ChannelUpdateWithoutCommunityDataInput!
  where: ChannelWhereUniqueInput!
}

input ChannelWhereInput {
  AND: [ChannelWhereInput!]
  author: UserWhereInput
  authorUsername: NullableStringFilter
  community: CommunityWhereInput
  communityUrl: NullableStringFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  id: StringFilter
  messages: MessageFilter
  name: StringFilter
  NOT: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  url: StringFilter
}

input ChannelWhereUniqueInput {
  communityUrl_url: CommunityUrlUrlCompoundUniqueInput
  id: String
}

type Community {
  author: User
  channels: [Channel!]!
  description: String
  id: String!
  image: String
  isFollowed: Boolean!
  members: [User!]!
  name: String!
  url: String!
}

input CommunityCreateManyWithoutAuthorInput {
  connect: [CommunityWhereUniqueInput!]
  create: [CommunityCreateWithoutAuthorInput!]
}

input CommunityCreateManyWithoutMembersInput {
  connect: [CommunityWhereUniqueInput!]
  create: [CommunityCreateWithoutMembersInput!]
}

input CommunityCreateOneWithoutChannelsInput {
  connect: CommunityWhereUniqueInput
  create: CommunityCreateWithoutChannelsInput
}

input CommunityCreateWithoutAuthorInput {
  channels: ChannelCreateManyWithoutCommunityInput
  description: String
  id: String
  image: String
  isFollowed: Boolean
  members: UserCreateManyWithoutCommunitiesFollowedInput
  name: String!
  url: String!
}

input CommunityCreateWithoutChannelsInput {
  author: UserCreateOneWithoutCommunitiesOwnedInput
  description: String
  id: String
  image: String
  isFollowed: Boolean
  members: UserCreateManyWithoutCommunitiesFollowedInput
  name: String!
  url: String!
}

input CommunityCreateWithoutMembersInput {
  author: UserCreateOneWithoutCommunitiesOwnedInput
  channels: ChannelCreateManyWithoutCommunityInput
  description: String
  id: String
  image: String
  isFollowed: Boolean
  name: String!
  url: String!
}

input CommunityFilter {
  every: CommunityWhereInput
  none: CommunityWhereInput
  some: CommunityWhereInput
}

input CommunityOrderByInput {
  authorUsername: OrderByArg
  description: OrderByArg
  id: OrderByArg
  image: OrderByArg
  isFollowed: OrderByArg
  name: OrderByArg
  url: OrderByArg
}

input CommunityScalarWhereInput {
  AND: [CommunityScalarWhereInput!]
  authorUsername: NullableStringFilter
  channels: ChannelFilter
  description: NullableStringFilter
  id: StringFilter
  image: NullableStringFilter
  isFollowed: NullableBooleanFilter
  members: UserFilter
  name: StringFilter
  NOT: [CommunityScalarWhereInput!]
  OR: [CommunityScalarWhereInput!]
  url: StringFilter
}

input CommunityUpdateInput {
  author: UserUpdateOneWithoutCommunitiesOwnedInput
  channels: ChannelUpdateManyWithoutCommunityInput
  description: String
  id: String
  image: String
  isFollowed: Boolean
  members: UserUpdateManyWithoutCommunitiesFollowedInput
  name: String
  url: String
}

input CommunityUpdateManyDataInput {
  description: String
  id: String
  image: String
  isFollowed: Boolean
  name: String
  url: String
}

input CommunityUpdateManyWithoutAuthorInput {
  connect: [CommunityWhereUniqueInput!]
  create: [CommunityCreateWithoutAuthorInput!]
  delete: [CommunityWhereUniqueInput!]
  deleteMany: [CommunityScalarWhereInput!]
  disconnect: [CommunityWhereUniqueInput!]
  set: [CommunityWhereUniqueInput!]
  update: [CommunityUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommunityUpdateManyWithWhereNestedInput!]
  upsert: [CommunityUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommunityUpdateManyWithoutMembersInput {
  connect: [CommunityWhereUniqueInput!]
  create: [CommunityCreateWithoutMembersInput!]
  delete: [CommunityWhereUniqueInput!]
  deleteMany: [CommunityScalarWhereInput!]
  disconnect: [CommunityWhereUniqueInput!]
  set: [CommunityWhereUniqueInput!]
  update: [CommunityUpdateWithWhereUniqueWithoutMembersInput!]
  updateMany: [CommunityUpdateManyWithWhereNestedInput!]
  upsert: [CommunityUpsertWithWhereUniqueWithoutMembersInput!]
}

input CommunityUpdateManyWithWhereNestedInput {
  data: CommunityUpdateManyDataInput!
  where: CommunityScalarWhereInput!
}

input CommunityUpdateOneWithoutChannelsInput {
  connect: CommunityWhereUniqueInput
  create: CommunityCreateWithoutChannelsInput
  delete: Boolean
  disconnect: Boolean
  update: CommunityUpdateWithoutChannelsDataInput
  upsert: CommunityUpsertWithoutChannelsInput
}

input CommunityUpdateWithoutAuthorDataInput {
  channels: ChannelUpdateManyWithoutCommunityInput
  description: String
  id: String
  image: String
  isFollowed: Boolean
  members: UserUpdateManyWithoutCommunitiesFollowedInput
  name: String
  url: String
}

input CommunityUpdateWithoutChannelsDataInput {
  author: UserUpdateOneWithoutCommunitiesOwnedInput
  description: String
  id: String
  image: String
  isFollowed: Boolean
  members: UserUpdateManyWithoutCommunitiesFollowedInput
  name: String
  url: String
}

input CommunityUpdateWithoutMembersDataInput {
  author: UserUpdateOneWithoutCommunitiesOwnedInput
  channels: ChannelUpdateManyWithoutCommunityInput
  description: String
  id: String
  image: String
  isFollowed: Boolean
  name: String
  url: String
}

input CommunityUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommunityUpdateWithoutAuthorDataInput!
  where: CommunityWhereUniqueInput!
}

input CommunityUpdateWithWhereUniqueWithoutMembersInput {
  data: CommunityUpdateWithoutMembersDataInput!
  where: CommunityWhereUniqueInput!
}

input CommunityUpsertWithoutChannelsInput {
  create: CommunityCreateWithoutChannelsInput!
  update: CommunityUpdateWithoutChannelsDataInput!
}

input CommunityUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommunityCreateWithoutAuthorInput!
  update: CommunityUpdateWithoutAuthorDataInput!
  where: CommunityWhereUniqueInput!
}

input CommunityUpsertWithWhereUniqueWithoutMembersInput {
  create: CommunityCreateWithoutMembersInput!
  update: CommunityUpdateWithoutMembersDataInput!
  where: CommunityWhereUniqueInput!
}

input CommunityUrlUrlCompoundUniqueInput {
  communityUrl: String!
  url: String!
}

input CommunityWhereInput {
  AND: [CommunityWhereInput!]
  author: UserWhereInput
  authorUsername: NullableStringFilter
  channels: ChannelFilter
  description: NullableStringFilter
  id: StringFilter
  image: NullableStringFilter
  isFollowed: NullableBooleanFilter
  members: UserFilter
  name: StringFilter
  NOT: [CommunityWhereInput!]
  OR: [CommunityWhereInput!]
  url: StringFilter
}

input CommunityWhereUniqueInput {
  id: String
  name: String
  url: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type File {
  encoding: String!
  filename: String!
  filesize: String
  id: String!
  Key: String!
  message: Message
  mimetype: String!
  uploader: User!
}

input FileCreateManyWithoutMessageInput {
  connect: [FileWhereUniqueInput!]
  create: [FileCreateWithoutMessageInput!]
}

input FileCreateManyWithoutUploaderInput {
  connect: [FileWhereUniqueInput!]
  create: [FileCreateWithoutUploaderInput!]
}

input FileCreateWithoutMessageInput {
  createdAt: DateTime
  encoding: String!
  filename: String!
  filesize: String
  id: String
  Key: String!
  mimetype: String!
  uploader: UserCreateOneWithoutFilesInput!
}

input FileCreateWithoutUploaderInput {
  createdAt: DateTime
  encoding: String!
  filename: String!
  filesize: String
  id: String
  Key: String!
  message: MessageCreateOneWithoutFilesInput
  mimetype: String!
}

input FileFilter {
  every: FileWhereInput
  none: FileWhereInput
  some: FileWhereInput
}

input FileScalarWhereInput {
  AND: [FileScalarWhereInput!]
  createdAt: DateTimeFilter
  encoding: StringFilter
  filename: StringFilter
  filesize: NullableStringFilter
  id: StringFilter
  Key: StringFilter
  messageId: NullableStringFilter
  mimetype: StringFilter
  NOT: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  uploaderUsername: StringFilter
}

input FileUpdateManyDataInput {
  createdAt: DateTime
  encoding: String
  filename: String
  filesize: String
  id: String
  Key: String
  mimetype: String
}

input FileUpdateManyWithoutMessageInput {
  connect: [FileWhereUniqueInput!]
  create: [FileCreateWithoutMessageInput!]
  delete: [FileWhereUniqueInput!]
  deleteMany: [FileScalarWhereInput!]
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutMessageInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutMessageInput!]
}

input FileUpdateManyWithoutUploaderInput {
  connect: [FileWhereUniqueInput!]
  create: [FileCreateWithoutUploaderInput!]
  delete: [FileWhereUniqueInput!]
  deleteMany: [FileScalarWhereInput!]
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutUploaderInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutUploaderInput!]
}

input FileUpdateManyWithWhereNestedInput {
  data: FileUpdateManyDataInput!
  where: FileScalarWhereInput!
}

input FileUpdateWithoutMessageDataInput {
  createdAt: DateTime
  encoding: String
  filename: String
  filesize: String
  id: String
  Key: String
  mimetype: String
  uploader: UserUpdateOneRequiredWithoutFilesInput
}

input FileUpdateWithoutUploaderDataInput {
  createdAt: DateTime
  encoding: String
  filename: String
  filesize: String
  id: String
  Key: String
  message: MessageUpdateOneWithoutFilesInput
  mimetype: String
}

input FileUpdateWithWhereUniqueWithoutMessageInput {
  data: FileUpdateWithoutMessageDataInput!
  where: FileWhereUniqueInput!
}

input FileUpdateWithWhereUniqueWithoutUploaderInput {
  data: FileUpdateWithoutUploaderDataInput!
  where: FileWhereUniqueInput!
}

input FileUpsertWithWhereUniqueWithoutMessageInput {
  create: FileCreateWithoutMessageInput!
  update: FileUpdateWithoutMessageDataInput!
  where: FileWhereUniqueInput!
}

input FileUpsertWithWhereUniqueWithoutUploaderInput {
  create: FileCreateWithoutUploaderInput!
  update: FileUpdateWithoutUploaderDataInput!
  where: FileWhereUniqueInput!
}

input FileWhereInput {
  AND: [FileWhereInput!]
  createdAt: DateTimeFilter
  encoding: StringFilter
  filename: StringFilter
  filesize: NullableStringFilter
  id: StringFilter
  Key: StringFilter
  message: MessageWhereInput
  messageId: NullableStringFilter
  mimetype: StringFilter
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  uploader: UserWhereInput
  uploaderUsername: StringFilter
}

input FileWhereUniqueInput {
  id: String
  Key: String
}

type Message {
  author: User!
  body: String
  channel: Channel!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input MessageCreateManyWithoutAuthorInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutAuthorInput!]
}

input MessageCreateManyWithoutChannelInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutChannelInput!]
}

input MessageCreateOneWithoutFilesInput {
  connect: MessageWhereUniqueInput
  create: MessageCreateWithoutFilesInput
}

input MessageCreateWithoutAuthorInput {
  body: String
  channel: ChannelCreateOneWithoutMessagesInput!
  createdAt: DateTime
  files: FileCreateManyWithoutMessageInput
  id: String
  updatedAt: DateTime
}

input MessageCreateWithoutChannelInput {
  author: UserCreateOneWithoutMessagesInput!
  body: String
  createdAt: DateTime
  files: FileCreateManyWithoutMessageInput
  id: String
  updatedAt: DateTime
}

input MessageCreateWithoutFilesInput {
  author: UserCreateOneWithoutMessagesInput!
  body: String
  channel: ChannelCreateOneWithoutMessagesInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input MessageFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  authorUsername: StringFilter
  body: NullableStringFilter
  channelId: StringFilter
  createdAt: DateTimeFilter
  files: FileFilter
  id: StringFilter
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input MessageUpdateManyDataInput {
  body: String
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input MessageUpdateManyWithoutAuthorInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutAuthorInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutAuthorInput!]
}

input MessageUpdateManyWithoutChannelInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutChannelInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChannelInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChannelInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  data: MessageUpdateManyDataInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateOneWithoutFilesInput {
  connect: MessageWhereUniqueInput
  create: MessageCreateWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  update: MessageUpdateWithoutFilesDataInput
  upsert: MessageUpsertWithoutFilesInput
}

input MessageUpdateWithoutAuthorDataInput {
  body: String
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
  createdAt: DateTime
  files: FileUpdateManyWithoutMessageInput
  id: String
  updatedAt: DateTime
}

input MessageUpdateWithoutChannelDataInput {
  author: UserUpdateOneRequiredWithoutMessagesInput
  body: String
  createdAt: DateTime
  files: FileUpdateManyWithoutMessageInput
  id: String
  updatedAt: DateTime
}

input MessageUpdateWithoutFilesDataInput {
  author: UserUpdateOneRequiredWithoutMessagesInput
  body: String
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input MessageUpdateWithWhereUniqueWithoutAuthorInput {
  data: MessageUpdateWithoutAuthorDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutChannelInput {
  data: MessageUpdateWithoutChannelDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithoutFilesInput {
  create: MessageCreateWithoutFilesInput!
  update: MessageUpdateWithoutFilesDataInput!
}

input MessageUpsertWithWhereUniqueWithoutAuthorInput {
  create: MessageCreateWithoutAuthorInput!
  update: MessageUpdateWithoutAuthorDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutChannelInput {
  create: MessageCreateWithoutChannelInput!
  update: MessageUpdateWithoutChannelDataInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  author: UserWhereInput
  authorUsername: StringFilter
  body: NullableStringFilter
  channel: ChannelWhereInput
  channelId: StringFilter
  createdAt: DateTimeFilter
  files: FileFilter
  id: StringFilter
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  updatedAt: DateTimeFilter
}

input MessageWhereUniqueInput {
  id: String
}

type Mutation {
  attachRoleToUser(roleId: String!, userId: String!): User!
  createChannel(data: ChannelCreateInput!): Channel!
  createCommunity(description: String, image: String, isPrivate: Boolean, name: String, url: String): Community!
  createRole(color: String, permissions: String, title: String): Role!
  deattachRoleToUser(roleId: String!, userId: String!): User!
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteCommunity(where: CommunityWhereUniqueInput!): Community
  deleteRole(id: String): Role!
  followCommunity(url: String): Community!
  login(email: String, fullname: String, social: String!, username: String!): AuthPayload!
  logout: User!
  sendMessage(body: String, channelUrl: String, communityUrl: String): Message!
  unfollowCommunity(url: String): Community!
  updateChannel(data: ChannelUpdateInput!, where: ChannelWhereUniqueInput!): Channel
  updateCommunity(data: CommunityUpdateInput!, where: CommunityWhereUniqueInput!): Community
  updateRole(color: String, id: String, permissions: String, title: String): Role!
  uploadFile(file: Upload): File!
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type OnlinePayload {
  id: String!
  isOnline: String!
  user: User!
}

enum OrderByArg {
  asc
  desc
}

type Query {
  channel(where: ChannelWhereUniqueInput!): Channel
  channels(after: ChannelWhereUniqueInput, before: ChannelWhereUniqueInput, first: Int, last: Int, orderBy: ChannelOrderByInput, skip: Int, where: ChannelWhereInput): [Channel!]!
  communities(after: CommunityWhereUniqueInput, before: CommunityWhereUniqueInput, first: Int, last: Int, orderBy: CommunityOrderByInput, skip: Int, where: CommunityWhereInput): [Community!]!
  community(where: CommunityWhereUniqueInput!): Community
  files(after: ID): [File!]!
  getUser(username: String!): TwitterPayload!
  me: User!
  messages(channelUrl: String, communityUrl: String): [Message!]!
  roles: [Role!]!
  userFiles(after: ID, userId: ID): [File!]!
  users(searchString: String): [User!]!
}

type Role {
  color: String!
  createdAt: DateTime!
  id: String!
  permissions: String!
  title: String!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
}

input RoleCreateManyWithoutUsersInput {
  connect: [RoleWhereUniqueInput!]
  create: [RoleCreateWithoutUsersInput!]
}

input RoleCreateWithoutUsersInput {
  color: String!
  createdAt: DateTime
  id: String
  permissions: String!
  title: String!
}

input RoleFilter {
  every: RoleWhereInput
  none: RoleWhereInput
  some: RoleWhereInput
}

input RoleScalarWhereInput {
  AND: [RoleScalarWhereInput!]
  color: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [RoleScalarWhereInput!]
  OR: [RoleScalarWhereInput!]
  permissions: StringFilter
  title: StringFilter
  users: UserFilter
}

input RoleUpdateManyDataInput {
  color: String
  createdAt: DateTime
  id: String
  permissions: String
  title: String
}

input RoleUpdateManyWithoutUsersInput {
  connect: [RoleWhereUniqueInput!]
  create: [RoleCreateWithoutUsersInput!]
  delete: [RoleWhereUniqueInput!]
  deleteMany: [RoleScalarWhereInput!]
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutUsersInput!]
}

input RoleUpdateManyWithWhereNestedInput {
  data: RoleUpdateManyDataInput!
  where: RoleScalarWhereInput!
}

input RoleUpdateWithoutUsersDataInput {
  color: String
  createdAt: DateTime
  id: String
  permissions: String
  title: String
}

input RoleUpdateWithWhereUniqueWithoutUsersInput {
  data: RoleUpdateWithoutUsersDataInput!
  where: RoleWhereUniqueInput!
}

input RoleUpsertWithWhereUniqueWithoutUsersInput {
  create: RoleCreateWithoutUsersInput!
  update: RoleUpdateWithoutUsersDataInput!
  where: RoleWhereUniqueInput!
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  color: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  permissions: StringFilter
  title: StringFilter
  users: UserFilter
}

input RoleWhereUniqueInput {
  id: String
  title: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  newMessage(channelUrl: String, communityUrl: String): Message!
}

type TwitterPayload {
  bio: String!
  followers: String!
  followings: String!
  user: User!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  bio: String
  channels: [Channel!]!
  communitiesFollowed: [Community!]!
  communitiesOwned: [Community!]!
  email: String
  fullname: String
  id: String!
  image: String
  isOnline: Boolean!
  roles: [Role!]!
  social: String
  username: String!
}

input UserCreateManyWithoutCommunitiesFollowedInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutCommunitiesFollowedInput!]
}

input UserCreateOneWithoutChannelsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChannelsInput
}

input UserCreateOneWithoutCommunitiesOwnedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommunitiesOwnedInput
}

input UserCreateOneWithoutFilesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFilesInput
}

input UserCreateOneWithoutMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessagesInput
}

input UserCreateWithoutChannelsInput {
  bio: String
  communitiesFollowed: CommunityCreateManyWithoutMembersInput
  communitiesOwned: CommunityCreateManyWithoutAuthorInput
  email: String
  files: FileCreateManyWithoutUploaderInput
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  messages: MessageCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  social: String
  username: String!
}

input UserCreateWithoutCommunitiesFollowedInput {
  bio: String
  channels: ChannelCreateManyWithoutAuthorInput
  communitiesOwned: CommunityCreateManyWithoutAuthorInput
  email: String
  files: FileCreateManyWithoutUploaderInput
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  messages: MessageCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  social: String
  username: String!
}

input UserCreateWithoutCommunitiesOwnedInput {
  bio: String
  channels: ChannelCreateManyWithoutAuthorInput
  communitiesFollowed: CommunityCreateManyWithoutMembersInput
  email: String
  files: FileCreateManyWithoutUploaderInput
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  messages: MessageCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  social: String
  username: String!
}

input UserCreateWithoutFilesInput {
  bio: String
  channels: ChannelCreateManyWithoutAuthorInput
  communitiesFollowed: CommunityCreateManyWithoutMembersInput
  communitiesOwned: CommunityCreateManyWithoutAuthorInput
  email: String
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  messages: MessageCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  social: String
  username: String!
}

input UserCreateWithoutMessagesInput {
  bio: String
  channels: ChannelCreateManyWithoutAuthorInput
  communitiesFollowed: CommunityCreateManyWithoutMembersInput
  communitiesOwned: CommunityCreateManyWithoutAuthorInput
  email: String
  files: FileCreateManyWithoutUploaderInput
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  roles: RoleCreateManyWithoutUsersInput
  social: String
  username: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  bio: OrderByArg
  email: OrderByArg
  fullname: OrderByArg
  id: OrderByArg
  image: OrderByArg
  isOnline: OrderByArg
  social: OrderByArg
  username: OrderByArg
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  bio: NullableStringFilter
  channels: ChannelFilter
  communitiesFollowed: CommunityFilter
  communitiesOwned: CommunityFilter
  email: NullableStringFilter
  files: FileFilter
  fullname: NullableStringFilter
  id: StringFilter
  image: NullableStringFilter
  isOnline: BooleanFilter
  messages: MessageFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  roles: RoleFilter
  social: NullableStringFilter
  username: StringFilter
}

input UserUpdateManyDataInput {
  bio: String
  email: String
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  social: String
  username: String
}

input UserUpdateManyWithoutCommunitiesFollowedInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutCommunitiesFollowedInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCommunitiesFollowedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCommunitiesFollowedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutFilesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFilesInput
  update: UserUpdateWithoutFilesDataInput
  upsert: UserUpsertWithoutFilesInput
}

input UserUpdateOneRequiredWithoutMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessagesInput
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
}

input UserUpdateOneWithoutChannelsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChannelsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutChannelsDataInput
  upsert: UserUpsertWithoutChannelsInput
}

input UserUpdateOneWithoutCommunitiesOwnedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommunitiesOwnedInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommunitiesOwnedDataInput
  upsert: UserUpsertWithoutCommunitiesOwnedInput
}

input UserUpdateWithoutChannelsDataInput {
  bio: String
  communitiesFollowed: CommunityUpdateManyWithoutMembersInput
  communitiesOwned: CommunityUpdateManyWithoutAuthorInput
  email: String
  files: FileUpdateManyWithoutUploaderInput
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  messages: MessageUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  social: String
  username: String
}

input UserUpdateWithoutCommunitiesFollowedDataInput {
  bio: String
  channels: ChannelUpdateManyWithoutAuthorInput
  communitiesOwned: CommunityUpdateManyWithoutAuthorInput
  email: String
  files: FileUpdateManyWithoutUploaderInput
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  messages: MessageUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  social: String
  username: String
}

input UserUpdateWithoutCommunitiesOwnedDataInput {
  bio: String
  channels: ChannelUpdateManyWithoutAuthorInput
  communitiesFollowed: CommunityUpdateManyWithoutMembersInput
  email: String
  files: FileUpdateManyWithoutUploaderInput
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  messages: MessageUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  social: String
  username: String
}

input UserUpdateWithoutFilesDataInput {
  bio: String
  channels: ChannelUpdateManyWithoutAuthorInput
  communitiesFollowed: CommunityUpdateManyWithoutMembersInput
  communitiesOwned: CommunityUpdateManyWithoutAuthorInput
  email: String
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  messages: MessageUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  social: String
  username: String
}

input UserUpdateWithoutMessagesDataInput {
  bio: String
  channels: ChannelUpdateManyWithoutAuthorInput
  communitiesFollowed: CommunityUpdateManyWithoutMembersInput
  communitiesOwned: CommunityUpdateManyWithoutAuthorInput
  email: String
  files: FileUpdateManyWithoutUploaderInput
  fullname: String
  id: String
  image: String
  isOnline: Boolean
  roles: RoleUpdateManyWithoutUsersInput
  social: String
  username: String
}

input UserUpdateWithWhereUniqueWithoutCommunitiesFollowedInput {
  data: UserUpdateWithoutCommunitiesFollowedDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutChannelsInput {
  create: UserCreateWithoutChannelsInput!
  update: UserUpdateWithoutChannelsDataInput!
}

input UserUpsertWithoutCommunitiesOwnedInput {
  create: UserCreateWithoutCommunitiesOwnedInput!
  update: UserUpdateWithoutCommunitiesOwnedDataInput!
}

input UserUpsertWithoutFilesInput {
  create: UserCreateWithoutFilesInput!
  update: UserUpdateWithoutFilesDataInput!
}

input UserUpsertWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput!
  update: UserUpdateWithoutMessagesDataInput!
}

input UserUpsertWithWhereUniqueWithoutCommunitiesFollowedInput {
  create: UserCreateWithoutCommunitiesFollowedInput!
  update: UserUpdateWithoutCommunitiesFollowedDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  bio: NullableStringFilter
  channels: ChannelFilter
  communitiesFollowed: CommunityFilter
  communitiesOwned: CommunityFilter
  email: NullableStringFilter
  files: FileFilter
  fullname: NullableStringFilter
  id: StringFilter
  image: NullableStringFilter
  isOnline: BooleanFilter
  messages: MessageFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  roles: RoleFilter
  social: NullableStringFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
